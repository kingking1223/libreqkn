{"ast":null,"code":"// import React, { useEffect, useState } from 'react'\n// import { Avatar, useChatContext } from 'stream-chat-react'\n\n// import { InviteIcon } from '../assets'\n\n// const ListContainer = ({ children }) => {\n//     return (\n//         <div className=\"user-list__container\">\n//             <div className='user-list__header'>\n//                 <p>User</p>\n//                 <p>Invite</p>\n//             </div>\n//             {children}\n//         </div>\n//     )\n// }\n\n// const UserItem = ({ user, setSelectedUsers }) => {\n//     const [selected, setSelected] = useState(false)\n\n//     const handleSelect = () => {\n//         if (selected) {\n//             setSelectedUsers((prevUsers) => prevUsers.filter((prevUser) => prevUser !== user.id))\n//         } else {\n//             setSelectedUsers((prevUsers) => [ ...prevUsers, user.id ])\n//         }\n\n//         setSelected((prevSelected) => !prevSelected)\n//     }\n\n//     return (\n//         <div className='user-item__wrapper' onClick={handleSelect}>\n//             <div className='user-item__name-wrapper'>\n//                 <Avatar image={user.image} name={user.fullName || user.id} size={32}/>\n//                 <p className='user-item__name'>{user.fullName || user.id}</p>\n//             </div>\n//             {selected ? <InviteIcon /> : <div className='user-item__invite-empty' />}\n//         </div>\n//     )\n// }\n\n// const UserList = ({ setSelectedUsers }) => {\n//     const { client } = useChatContext()\n//     const [users, setUsers] = useState([])\n//     const [loading, setLoading] = useState(false)\n//     const [listEmpty, setListEmpty] = useState(false)\n\n//     useEffect(() => {\n//         const getUsers = async () => {\n//             if (loading) return\n\n//             setLoading(true)\n//             try {\n//                 const response = await client.queryUsers(\n//                     { id: { $ne: client.userID } },\n//                     { id: 1 },\n//                     { limit: 8 }\n//                 )\n\n//                 if (response.users.length) {\n//                     setUsers(response.users)\n//                 } else {\n//                     setListEmpty(true)\n//                 }\n//             } catch (error) {\n//                 console.log(error)\n//             }\n//             setLoading(false)\n//         }\n\n//         if (client) getUsers()\n//     }, [])\n\n//     return (\n//         <ListContainer>\n//             {loading ? <div className=\"user-list__message\">\n//                 Loading Users...\n//             </div> : (\n//                 users?.map((user, i) => (\n//                     <UserItem index={i} key={user.id} user={user} setSelectedUsers={setSelectedUsers}/>\n//                 ))\n//             )}\n//         </ListContainer>\n//     )\n// }\n\n// export default UserList","map":{"version":3,"names":[],"sources":["/home/kingking/Documents/code/website/libreqkn/client/src/components/UserList.jsx"],"sourcesContent":["// import React, { useEffect, useState } from 'react'\n// import { Avatar, useChatContext } from 'stream-chat-react'\n\n// import { InviteIcon } from '../assets'\n\n// const ListContainer = ({ children }) => {\n//     return (\n//         <div className=\"user-list__container\">\n//             <div className='user-list__header'>\n//                 <p>User</p>\n//                 <p>Invite</p>\n//             </div>\n//             {children}\n//         </div>\n//     )\n// }\n\n// const UserItem = ({ user, setSelectedUsers }) => {\n//     const [selected, setSelected] = useState(false)\n\n//     const handleSelect = () => {\n//         if (selected) {\n//             setSelectedUsers((prevUsers) => prevUsers.filter((prevUser) => prevUser !== user.id))\n//         } else {\n//             setSelectedUsers((prevUsers) => [ ...prevUsers, user.id ])\n//         }\n\n//         setSelected((prevSelected) => !prevSelected)\n//     }\n\n//     return (\n//         <div className='user-item__wrapper' onClick={handleSelect}>\n//             <div className='user-item__name-wrapper'>\n//                 <Avatar image={user.image} name={user.fullName || user.id} size={32}/>\n//                 <p className='user-item__name'>{user.fullName || user.id}</p>\n//             </div>\n//             {selected ? <InviteIcon /> : <div className='user-item__invite-empty' />}\n//         </div>\n//     )\n// }\n\n// const UserList = ({ setSelectedUsers }) => {\n//     const { client } = useChatContext()\n//     const [users, setUsers] = useState([])\n//     const [loading, setLoading] = useState(false)\n//     const [listEmpty, setListEmpty] = useState(false)\n\n//     useEffect(() => {\n//         const getUsers = async () => {\n//             if (loading) return\n\n//             setLoading(true)\n//             try {\n//                 const response = await client.queryUsers(\n//                     { id: { $ne: client.userID } },\n//                     { id: 1 },\n//                     { limit: 8 }\n//                 )\n\n//                 if (response.users.length) {\n//                     setUsers(response.users)\n//                 } else {\n//                     setListEmpty(true)\n//                 }\n//             } catch (error) {\n//                 console.log(error)\n//             }\n//             setLoading(false)\n//         }\n\n//         if (client) getUsers()\n//     }, [])\n\n//     return (\n//         <ListContainer>\n//             {loading ? <div className=\"user-list__message\">\n//                 Loading Users...\n//             </div> : (\n//                 users?.map((user, i) => (\n//                     <UserItem index={i} key={user.id} user={user} setSelectedUsers={setSelectedUsers}/>\n//                 ))\n//             )}\n//         </ListContainer>\n//     )\n// }\n\n// export default UserList"],"mappings":"AAAA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}