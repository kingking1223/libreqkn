{"ast":null,"code":"import React from 'react';\nimport { DeliveredCheckIcon } from './icons';\nimport { getReadByTooltipText } from './utils';\nimport { Avatar as DefaultAvatar } from '../Avatar';\nimport { LoadingIndicator } from '../Loading';\nimport { Tooltip } from '../Tooltip';\nimport { useChatContext } from '../../context/ChatContext';\nimport { useComponentContext } from '../../context/ComponentContext';\nimport { useMessageContext } from '../../context/MessageContext';\nimport { useTranslationContext } from '../../context/TranslationContext';\nvar UnMemoizedMessageStatus = function (props) {\n  var _a;\n  var propAvatar = props.Avatar,\n    _b = props.messageType,\n    messageType = _b === void 0 ? 'simple' : _b;\n  var client = useChatContext('MessageStatus').client;\n  var contextAvatar = useComponentContext('MessageStatus').Avatar;\n  var _c = useMessageContext('MessageStatus'),\n    isMyMessage = _c.isMyMessage,\n    lastReceivedId = _c.lastReceivedId,\n    message = _c.message,\n    readBy = _c.readBy,\n    threadList = _c.threadList;\n  var t = useTranslationContext('MessageStatus').t;\n  var Avatar = propAvatar || contextAvatar || DefaultAvatar;\n  if (!isMyMessage() || message.type === 'error') {\n    return null;\n  }\n  var justReadByMe = (readBy === null || readBy === void 0 ? void 0 : readBy.length) === 1 && readBy[0].id === ((_a = client.user) === null || _a === void 0 ? void 0 : _a.id);\n  if (message.status === 'sending') {\n    return React.createElement(\"span\", {\n      className: \"str-chat__message-\" + messageType + \"-status\",\n      \"data-testid\": 'message-status-sending'\n    }, React.createElement(Tooltip, null, t('Sending...')), React.createElement(LoadingIndicator, null));\n  }\n  if ((readBy === null || readBy === void 0 ? void 0 : readBy.length) && !threadList && !justReadByMe) {\n    var lastReadUser = readBy.filter(function (item) {\n      var _a;\n      return item.id !== ((_a = client.user) === null || _a === void 0 ? void 0 : _a.id);\n    })[0];\n    return React.createElement(\"span\", {\n      className: \"str-chat__message-\" + messageType + \"-status\",\n      \"data-testid\": 'message-status-read-by'\n    }, React.createElement(Tooltip, null, getReadByTooltipText(readBy, t, client)), React.createElement(Avatar, {\n      image: lastReadUser.image,\n      name: lastReadUser.name || lastReadUser.id,\n      size: 15,\n      user: lastReadUser\n    }), readBy.length > 2 && React.createElement(\"span\", {\n      className: \"str-chat__message-\" + messageType + \"-status-number\",\n      \"data-testid\": 'message-status-read-by-many'\n    }, readBy.length - 1));\n  }\n  if (message.status === 'received' && message.id === lastReceivedId && !threadList) {\n    return React.createElement(\"span\", {\n      className: \"str-chat__message-\" + messageType + \"-status\",\n      \"data-testid\": 'message-status-received'\n    }, React.createElement(Tooltip, null, t('Delivered')), React.createElement(DeliveredCheckIcon, null));\n  }\n  return null;\n};\nexport var MessageStatus = React.memo(UnMemoizedMessageStatus);","map":{"version":3,"names":["React","DeliveredCheckIcon","getReadByTooltipText","Avatar","DefaultAvatar","LoadingIndicator","Tooltip","useChatContext","useComponentContext","useMessageContext","useTranslationContext","UnMemoizedMessageStatus","props","_a","propAvatar","_b","messageType","client","contextAvatar","_c","isMyMessage","lastReceivedId","message","readBy","threadList","t","type","justReadByMe","length","id","user","status","createElement","className","lastReadUser","filter","item","image","name","size","MessageStatus","memo"],"sources":["/home/kingking/Documents/code/website/libreqkn/client/node_modules/stream-chat-react/dist/components/Message/MessageStatus.js"],"sourcesContent":["import React from 'react';\nimport { DeliveredCheckIcon } from './icons';\nimport { getReadByTooltipText } from './utils';\nimport { Avatar as DefaultAvatar } from '../Avatar';\nimport { LoadingIndicator } from '../Loading';\nimport { Tooltip } from '../Tooltip';\nimport { useChatContext } from '../../context/ChatContext';\nimport { useComponentContext } from '../../context/ComponentContext';\nimport { useMessageContext } from '../../context/MessageContext';\nimport { useTranslationContext } from '../../context/TranslationContext';\nvar UnMemoizedMessageStatus = function (props) {\n    var _a;\n    var propAvatar = props.Avatar, _b = props.messageType, messageType = _b === void 0 ? 'simple' : _b;\n    var client = useChatContext('MessageStatus').client;\n    var contextAvatar = useComponentContext('MessageStatus').Avatar;\n    var _c = useMessageContext('MessageStatus'), isMyMessage = _c.isMyMessage, lastReceivedId = _c.lastReceivedId, message = _c.message, readBy = _c.readBy, threadList = _c.threadList;\n    var t = useTranslationContext('MessageStatus').t;\n    var Avatar = propAvatar || contextAvatar || DefaultAvatar;\n    if (!isMyMessage() || message.type === 'error') {\n        return null;\n    }\n    var justReadByMe = (readBy === null || readBy === void 0 ? void 0 : readBy.length) === 1 && readBy[0].id === ((_a = client.user) === null || _a === void 0 ? void 0 : _a.id);\n    if (message.status === 'sending') {\n        return (React.createElement(\"span\", { className: \"str-chat__message-\" + messageType + \"-status\", \"data-testid\": 'message-status-sending' },\n            React.createElement(Tooltip, null, t('Sending...')),\n            React.createElement(LoadingIndicator, null)));\n    }\n    if ((readBy === null || readBy === void 0 ? void 0 : readBy.length) && !threadList && !justReadByMe) {\n        var lastReadUser = readBy.filter(function (item) { var _a; return item.id !== ((_a = client.user) === null || _a === void 0 ? void 0 : _a.id); })[0];\n        return (React.createElement(\"span\", { className: \"str-chat__message-\" + messageType + \"-status\", \"data-testid\": 'message-status-read-by' },\n            React.createElement(Tooltip, null, getReadByTooltipText(readBy, t, client)),\n            React.createElement(Avatar, { image: lastReadUser.image, name: lastReadUser.name || lastReadUser.id, size: 15, user: lastReadUser }),\n            readBy.length > 2 && (React.createElement(\"span\", { className: \"str-chat__message-\" + messageType + \"-status-number\", \"data-testid\": 'message-status-read-by-many' }, readBy.length - 1))));\n    }\n    if (message.status === 'received' && message.id === lastReceivedId && !threadList) {\n        return (React.createElement(\"span\", { className: \"str-chat__message-\" + messageType + \"-status\", \"data-testid\": 'message-status-received' },\n            React.createElement(Tooltip, null, t('Delivered')),\n            React.createElement(DeliveredCheckIcon, null)));\n    }\n    return null;\n};\nexport var MessageStatus = React.memo(UnMemoizedMessageStatus);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}