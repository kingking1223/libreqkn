{"ast":null,"code":"var _jsxFileName = \"/home/kingking/Documents/code/website/libreqkn/client/src/components/ChannelSearch.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useChatContext } from 'stream-chat-react';\nimport { SearchIcon } from '../assets';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChannelSearch = _ref => {\n  _s();\n  let {\n    setToggleContainer\n  } = _ref;\n  const {\n    client,\n    setActiveChannel\n  } = useChatContext();\n  const [query, setQuery] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [teamChannel, setTeamChannel] = useState([]);\n  const [directChannel, setDirectChannel] = useState([]);\n  useEffect(() => {\n    if (!query) {\n      setTeamChannel([]);\n      setDirectChannel([]);\n    }\n  }, [query]);\n  const getChannels = async text => {\n    try {\n      const channelResponse = client.queryChannels({\n        type: 'team',\n        name: {\n          $autocomplete: text\n        },\n        members: {\n          $in: [client.userID]\n        }\n      });\n      const userResponse = client.queryUsers({\n        id: {\n          $ne: client.userID\n        },\n        name: {\n          $autocomplete: text\n        }\n      });\n      const [channels, {\n        users\n      }] = await Promise.all([channelResponse, userResponse]);\n      if (channels.length) setTeamChannel(channels);\n      if (users.length) setDirectChannel(channels);\n    } catch (error) {\n      setQuery('');\n    }\n  };\n  const onSearch = e => {\n    e.preventDefault();\n    setLoading(true);\n    setQuery(e.target.value);\n    getChannels(e.target.value);\n  };\n  const setChannel = c => {\n    setQuery('');\n    setActiveChannel(c);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"channel-search__container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"channel-search__input__wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"channel-search__input__icon\",\n        children: /*#__PURE__*/_jsxDEV(SearchIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"channel-search__input__text\",\n        placeholder: \"Search\",\n        type: \"text\",\n        value: query,\n        onChange: onSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), query && /*#__PURE__*/_jsxDEV(ResultsDropdown, {\n      teamChannel: teamChannel,\n      directChannel: directChannel,\n      loading: loading,\n      setChannel: setChannel,\n      setQuery: setQuery,\n      setToggleContainer: setToggleContainer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n};\n_s(ChannelSearch, \"Z67y3UtP+79ILMq6L5gOsqcj7R8=\", false, function () {\n  return [useChatContext];\n});\n_c = ChannelSearch;\nexport default ChannelSearch;\nvar _c;\n$RefreshReg$(_c, \"ChannelSearch\");","map":{"version":3,"names":["React","useState","useEffect","useChatContext","SearchIcon","ChannelSearch","setToggleContainer","client","setActiveChannel","query","setQuery","loading","setLoading","teamChannel","setTeamChannel","directChannel","setDirectChannel","getChannels","text","channelResponse","queryChannels","type","name","$autocomplete","members","$in","userID","userResponse","queryUsers","id","$ne","channels","users","Promise","all","length","error","onSearch","e","preventDefault","target","value","setChannel","c"],"sources":["/home/kingking/Documents/code/website/libreqkn/client/src/components/ChannelSearch.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useChatContext } from 'stream-chat-react';\nimport { SearchIcon } from '../assets';\n\nconst ChannelSearch = ({ setToggleContainer }) => {\n    const { client, setActiveChannel } = useChatContext()\n    const [query, setQuery] = useState('');\n    const [loading, setLoading] = useState(false);\n    const [teamChannel, setTeamChannel] = useState([])\n    const [directChannel, setDirectChannel] = useState([])\n\n    useEffect(() => {\n        if (!query) {\n            setTeamChannel([])\n            setDirectChannel([])\n        }\n    }, [query])\n\n    const getChannels = async (text) => {\n        try {\n            const channelResponse = client.queryChannels({\n                type: 'team', \n                name: { $autocomplete: text }, \n                members: { $in: [client.userID]}\n            })\n            const userResponse = client.queryUsers({\n                id: { $ne: client.userID },\n                name: { $autocomplete: text }\n            })\n\n            const [channels, { users }] = await Promise.all([channelResponse, userResponse])\n\n            if (channels.length) setTeamChannel(channels)\n            if (users.length) setDirectChannel(channels)\n        } catch (error) {\n            setQuery('');\n        }\n    } \n\n    const onSearch = (e) => {\n        e.preventDefault();\n        setLoading(true);\n        setQuery(e.target.value);\n        getChannels(e.target.value);\n    }\n\n    const setChannel = (c) => {\n        setQuery('')\n        setActiveChannel(c)\n    }\n\n    return (\n        <div className=\"channel-search__container\">\n            <div className=\"channel-search__input__wrapper\">\n                <div className=\"channel-search__input__icon\">\n                    <SearchIcon />\n                </div>\n                <input \n                    className=\"channel-search__input__text\" \n                    placeholder=\"Search\" \n                    type=\"text\" \n                    value={query}  \n                    onChange={onSearch}\n                />\n            </div>\n            { query && (\n                <ResultsDropdown \n                    teamChannel={teamChannel}\n                    directChannel={directChannel}\n                    loading={loading}\n                    setChannel={setChannel}\n                    setQuery={setQuery}\n                    setToggleContainer={setToggleContainer}\n                />\n            )}\n        </div>\n    )\n}\n\nexport default ChannelSearch"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}