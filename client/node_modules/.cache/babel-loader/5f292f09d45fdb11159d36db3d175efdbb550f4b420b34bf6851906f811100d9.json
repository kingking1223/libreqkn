{"ast":null,"code":"/**\n * @typedef Options\n * @property {Test} [ignore]\n *\n * @typedef {import('hast').Text} Text\n * @typedef {import('hast').Parent} Parent\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Content} Content\n * @typedef {Root|Content} Node\n *\n * @typedef {import('hast-util-is-element').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n *\n * @typedef RegExpMatchObject\n * @property {number} index\n * @property {string} input\n * @property {[Root, ...Array<Element>, Text]} stack\n *\n * @typedef {string|RegExp} Find\n * @typedef {string|ReplaceFunction} Replace\n *\n * @typedef {[Find, Replace]} FindAndReplaceTuple\n * @typedef {Record<string, Replace>} FindAndReplaceSchema\n * @typedef {Array<FindAndReplaceTuple>} FindAndReplaceList\n *\n * @typedef {[RegExp, ReplaceFunction]} Pair\n * @typedef {Array<Pair>} Pairs\n */\n\n/**\n * @callback ReplaceFunction\n * @param {...any} parameters\n * @returns {Array<Content>|Content|string|false|undefined|null}\n */\n\nimport { visitParents } from 'unist-util-visit-parents';\nimport { convertElement } from 'hast-util-is-element';\nimport escape from 'escape-string-regexp';\nconst own = {}.hasOwnProperty;\nexport const defaultIgnore = ['title', 'script', 'style', 'svg', 'math'];\n\n/**\n * @param {Node} tree\n * @param {Find|FindAndReplaceSchema|FindAndReplaceList} find\n * @param {Replace|Options} [replace]\n * @param {Options} [options]\n */\nexport function findAndReplace(tree, find, replace, options) {\n  /** @type {Options|undefined} */\n  let settings;\n  /** @type {FindAndReplaceSchema|FindAndReplaceList} */\n  let schema;\n  if (typeof find === 'string' || find instanceof RegExp) {\n    // @ts-expect-error don’t expect options twice.\n    schema = [[find, replace]];\n    settings = options;\n  } else {\n    schema = find;\n    // @ts-expect-error don’t expect replace twice.\n    settings = replace;\n  }\n  if (!settings) {\n    settings = {};\n  }\n  const ignored = convertElement(settings.ignore || defaultIgnore);\n  const pairs = toPairs(schema);\n  let pairIndex = -1;\n  while (++pairIndex < pairs.length) {\n    visitParents(tree, 'text', visitor);\n  }\n  return tree;\n\n  /** @type {import('unist-util-visit-parents/complex-types').BuildVisitor<Node, 'text'>} */\n  function visitor(node, parents) {\n    let index = -1;\n    /** @type {Root|Element|undefined} */\n    let grandparent;\n    while (++index < parents.length) {\n      const parent = parents[index];\n      if (ignored(parent,\n      // @ts-expect-error: TS doesn’t understand but it’s perfect.\n      grandparent ? grandparent.children.indexOf(parent) : undefined, grandparent)) {\n        return;\n      }\n      grandparent = parent;\n    }\n    if (grandparent) {\n      return handler(node, parents);\n    }\n  }\n\n  /**\n   * @param {Text} node\n   * @param {Array<Root|Element>} parents\n   * @returns {VisitorResult}\n   */\n  function handler(node, parents) {\n    const parent = parents[parents.length - 1];\n    const find = pairs[pairIndex][0];\n    const replace = pairs[pairIndex][1];\n    let start = 0;\n    const index = parent.children.indexOf(node);\n    let change = false;\n    /** @type {Array<Content>} */\n    let nodes = [];\n    /** @type {number|undefined} */\n    let position;\n    find.lastIndex = 0;\n    let match = find.exec(node.value);\n    while (match) {\n      position = match.index;\n      /** @type {RegExpMatchObject} */\n      const matchObject = {\n        index: match.index,\n        input: match.input,\n        // @ts-expect-error: stack is fine.\n        stack: [...parents, node]\n      };\n      let value = replace(...match, matchObject);\n      if (typeof value === 'string') {\n        value = value.length > 0 ? {\n          type: 'text',\n          value\n        } : undefined;\n      }\n\n      // It wasn’t a match after all.\n      if (value !== false) {\n        if (start !== position) {\n          nodes.push({\n            type: 'text',\n            value: node.value.slice(start, position)\n          });\n        }\n        if (Array.isArray(value)) {\n          nodes.push(...value);\n        } else if (value) {\n          nodes.push(value);\n        }\n        start = position + match[0].length;\n        change = true;\n      }\n      if (!find.global) {\n        break;\n      }\n      match = find.exec(node.value);\n    }\n    if (change) {\n      if (start < node.value.length) {\n        nodes.push({\n          type: 'text',\n          value: node.value.slice(start)\n        });\n      }\n      parent.children.splice(index, 1, ...nodes);\n    } else {\n      nodes = [node];\n    }\n    return index + nodes.length;\n  }\n}\n\n/**\n * @param {FindAndReplaceSchema|FindAndReplaceList} schema\n * @returns {Pairs}\n */\nfunction toPairs(schema) {\n  /** @type {Pairs} */\n  const result = [];\n  if (typeof schema !== 'object') {\n    throw new TypeError('Expected array or object as schema');\n  }\n  if (Array.isArray(schema)) {\n    let index = -1;\n    while (++index < schema.length) {\n      result.push([toExpression(schema[index][0]), toFunction(schema[index][1])]);\n    }\n  } else {\n    /** @type {string} */\n    let key;\n    for (key in schema) {\n      if (own.call(schema, key)) {\n        result.push([toExpression(key), toFunction(schema[key])]);\n      }\n    }\n  }\n  return result;\n}\n\n/**\n * @param {Find} find\n * @returns {RegExp}\n */\nfunction toExpression(find) {\n  return typeof find === 'string' ? new RegExp(escape(find), 'g') : find;\n}\n\n/**\n * @param {Replace} replace\n * @returns {ReplaceFunction}\n */\nfunction toFunction(replace) {\n  return typeof replace === 'function' ? replace : () => replace;\n}","map":{"version":3,"names":["visitParents","convertElement","escape","own","hasOwnProperty","defaultIgnore","findAndReplace","tree","find","replace","options","settings","schema","RegExp","ignored","ignore","pairs","toPairs","pairIndex","length","visitor","node","parents","index","grandparent","parent","children","indexOf","undefined","handler","start","change","nodes","position","lastIndex","match","exec","value","matchObject","input","stack","type","push","slice","Array","isArray","global","splice","result","TypeError","toExpression","toFunction","key","call"],"sources":["/home/kingking/Documents/code/website/libreqkn/node_modules/hast-util-find-and-replace/lib/index.js"],"sourcesContent":["/**\n * @typedef Options\n * @property {Test} [ignore]\n *\n * @typedef {import('hast').Text} Text\n * @typedef {import('hast').Parent} Parent\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Content} Content\n * @typedef {Root|Content} Node\n *\n * @typedef {import('hast-util-is-element').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n *\n * @typedef RegExpMatchObject\n * @property {number} index\n * @property {string} input\n * @property {[Root, ...Array<Element>, Text]} stack\n *\n * @typedef {string|RegExp} Find\n * @typedef {string|ReplaceFunction} Replace\n *\n * @typedef {[Find, Replace]} FindAndReplaceTuple\n * @typedef {Record<string, Replace>} FindAndReplaceSchema\n * @typedef {Array<FindAndReplaceTuple>} FindAndReplaceList\n *\n * @typedef {[RegExp, ReplaceFunction]} Pair\n * @typedef {Array<Pair>} Pairs\n */\n\n/**\n * @callback ReplaceFunction\n * @param {...any} parameters\n * @returns {Array<Content>|Content|string|false|undefined|null}\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\nimport {convertElement} from 'hast-util-is-element'\nimport escape from 'escape-string-regexp'\n\nconst own = {}.hasOwnProperty\n\nexport const defaultIgnore = ['title', 'script', 'style', 'svg', 'math']\n\n/**\n * @param {Node} tree\n * @param {Find|FindAndReplaceSchema|FindAndReplaceList} find\n * @param {Replace|Options} [replace]\n * @param {Options} [options]\n */\nexport function findAndReplace(tree, find, replace, options) {\n  /** @type {Options|undefined} */\n  let settings\n  /** @type {FindAndReplaceSchema|FindAndReplaceList} */\n  let schema\n\n  if (typeof find === 'string' || find instanceof RegExp) {\n    // @ts-expect-error don’t expect options twice.\n    schema = [[find, replace]]\n    settings = options\n  } else {\n    schema = find\n    // @ts-expect-error don’t expect replace twice.\n    settings = replace\n  }\n\n  if (!settings) {\n    settings = {}\n  }\n\n  const ignored = convertElement(settings.ignore || defaultIgnore)\n  const pairs = toPairs(schema)\n  let pairIndex = -1\n\n  while (++pairIndex < pairs.length) {\n    visitParents(tree, 'text', visitor)\n  }\n\n  return tree\n\n  /** @type {import('unist-util-visit-parents/complex-types').BuildVisitor<Node, 'text'>} */\n  function visitor(node, parents) {\n    let index = -1\n    /** @type {Root|Element|undefined} */\n    let grandparent\n\n    while (++index < parents.length) {\n      const parent = parents[index]\n\n      if (\n        ignored(\n          parent,\n          // @ts-expect-error: TS doesn’t understand but it’s perfect.\n          grandparent ? grandparent.children.indexOf(parent) : undefined,\n          grandparent\n        )\n      ) {\n        return\n      }\n\n      grandparent = parent\n    }\n\n    if (grandparent) {\n      return handler(node, parents)\n    }\n  }\n\n  /**\n   * @param {Text} node\n   * @param {Array<Root|Element>} parents\n   * @returns {VisitorResult}\n   */\n  function handler(node, parents) {\n    const parent = parents[parents.length - 1]\n    const find = pairs[pairIndex][0]\n    const replace = pairs[pairIndex][1]\n    let start = 0\n    const index = parent.children.indexOf(node)\n    let change = false\n    /** @type {Array<Content>} */\n    let nodes = []\n    /** @type {number|undefined} */\n    let position\n\n    find.lastIndex = 0\n\n    let match = find.exec(node.value)\n\n    while (match) {\n      position = match.index\n      /** @type {RegExpMatchObject} */\n      const matchObject = {\n        index: match.index,\n        input: match.input,\n        // @ts-expect-error: stack is fine.\n        stack: [...parents, node]\n      }\n      let value = replace(...match, matchObject)\n\n      if (typeof value === 'string') {\n        value = value.length > 0 ? {type: 'text', value} : undefined\n      }\n\n      // It wasn’t a match after all.\n      if (value !== false) {\n        if (start !== position) {\n          nodes.push({type: 'text', value: node.value.slice(start, position)})\n        }\n\n        if (Array.isArray(value)) {\n          nodes.push(...value)\n        } else if (value) {\n          nodes.push(value)\n        }\n\n        start = position + match[0].length\n        change = true\n      }\n\n      if (!find.global) {\n        break\n      }\n\n      match = find.exec(node.value)\n    }\n\n    if (change) {\n      if (start < node.value.length) {\n        nodes.push({type: 'text', value: node.value.slice(start)})\n      }\n\n      parent.children.splice(index, 1, ...nodes)\n    } else {\n      nodes = [node]\n    }\n\n    return index + nodes.length\n  }\n}\n\n/**\n * @param {FindAndReplaceSchema|FindAndReplaceList} schema\n * @returns {Pairs}\n */\nfunction toPairs(schema) {\n  /** @type {Pairs} */\n  const result = []\n\n  if (typeof schema !== 'object') {\n    throw new TypeError('Expected array or object as schema')\n  }\n\n  if (Array.isArray(schema)) {\n    let index = -1\n\n    while (++index < schema.length) {\n      result.push([\n        toExpression(schema[index][0]),\n        toFunction(schema[index][1])\n      ])\n    }\n  } else {\n    /** @type {string} */\n    let key\n\n    for (key in schema) {\n      if (own.call(schema, key)) {\n        result.push([toExpression(key), toFunction(schema[key])])\n      }\n    }\n  }\n\n  return result\n}\n\n/**\n * @param {Find} find\n * @returns {RegExp}\n */\nfunction toExpression(find) {\n  return typeof find === 'string' ? new RegExp(escape(find), 'g') : find\n}\n\n/**\n * @param {Replace} replace\n * @returns {ReplaceFunction}\n */\nfunction toFunction(replace) {\n  return typeof replace === 'function' ? replace : () => replace\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}