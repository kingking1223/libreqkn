{"ast":null,"code":"import { useMemo, useRef } from 'react';\nexport function usePrependedMessagesCount(messages, hasDateSeparator) {\n  var firstRealMessageIndex = hasDateSeparator ? 1 : 0;\n  var firstMessageId = useRef();\n  var earliestMessageId = useRef();\n  var previousNumItemsPrepended = useRef(0);\n  var numItemsPrepended = useMemo(function () {\n    var _a;\n    if (!messages || !messages.length) {\n      previousNumItemsPrepended.current = 0;\n      return 0;\n    }\n    var currentFirstMessageId = (_a = messages === null || messages === void 0 ? void 0 : messages[firstRealMessageIndex]) === null || _a === void 0 ? void 0 : _a.id;\n    // if no new messages were prepended, return early (same amount as before)\n    if (currentFirstMessageId === earliestMessageId.current) {\n      return previousNumItemsPrepended.current;\n    }\n    if (!firstMessageId.current) {\n      firstMessageId.current = currentFirstMessageId;\n    }\n    earliestMessageId.current = currentFirstMessageId;\n    // if new messages were prepended, find out how many\n    // start with this number because there cannot be fewer prepended items than before\n    for (var i = previousNumItemsPrepended.current; i < messages.length; i += 1) {\n      if (messages[i].id === firstMessageId.current) {\n        previousNumItemsPrepended.current = i;\n        return i;\n      }\n    }\n    // if no match has found, we have jumped - reset the prepend item count.\n    firstMessageId.current = currentFirstMessageId;\n    previousNumItemsPrepended.current = 0;\n    return 0;\n    // TODO: there's a bug here, the messages prop is the same array instance (something mutates it)\n    // that's why the second dependency is necessary\n  }, [messages, messages === null || messages === void 0 ? void 0 : messages.length]);\n  return numItemsPrepended;\n}","map":{"version":3,"names":["useMemo","useRef","usePrependedMessagesCount","messages","hasDateSeparator","firstRealMessageIndex","firstMessageId","earliestMessageId","previousNumItemsPrepended","numItemsPrepended","_a","length","current","currentFirstMessageId","id","i"],"sources":["/home/kingking/Documents/code/website/libreqkn/node_modules/stream-chat-react/dist/components/MessageList/hooks/usePrependMessagesCount.js"],"sourcesContent":["import { useMemo, useRef } from 'react';\nexport function usePrependedMessagesCount(messages, hasDateSeparator) {\n    var firstRealMessageIndex = hasDateSeparator ? 1 : 0;\n    var firstMessageId = useRef();\n    var earliestMessageId = useRef();\n    var previousNumItemsPrepended = useRef(0);\n    var numItemsPrepended = useMemo(function () {\n        var _a;\n        if (!messages || !messages.length) {\n            previousNumItemsPrepended.current = 0;\n            return 0;\n        }\n        var currentFirstMessageId = (_a = messages === null || messages === void 0 ? void 0 : messages[firstRealMessageIndex]) === null || _a === void 0 ? void 0 : _a.id;\n        // if no new messages were prepended, return early (same amount as before)\n        if (currentFirstMessageId === earliestMessageId.current) {\n            return previousNumItemsPrepended.current;\n        }\n        if (!firstMessageId.current) {\n            firstMessageId.current = currentFirstMessageId;\n        }\n        earliestMessageId.current = currentFirstMessageId;\n        // if new messages were prepended, find out how many\n        // start with this number because there cannot be fewer prepended items than before\n        for (var i = previousNumItemsPrepended.current; i < messages.length; i += 1) {\n            if (messages[i].id === firstMessageId.current) {\n                previousNumItemsPrepended.current = i;\n                return i;\n            }\n        }\n        // if no match has found, we have jumped - reset the prepend item count.\n        firstMessageId.current = currentFirstMessageId;\n        previousNumItemsPrepended.current = 0;\n        return 0;\n        // TODO: there's a bug here, the messages prop is the same array instance (something mutates it)\n        // that's why the second dependency is necessary\n    }, [messages, messages === null || messages === void 0 ? void 0 : messages.length]);\n    return numItemsPrepended;\n}\n"],"mappings":"AAAA,SAASA,OAAO,EAAEC,MAAM,QAAQ,OAAO;AACvC,OAAO,SAASC,yBAAyB,CAACC,QAAQ,EAAEC,gBAAgB,EAAE;EAClE,IAAIC,qBAAqB,GAAGD,gBAAgB,GAAG,CAAC,GAAG,CAAC;EACpD,IAAIE,cAAc,GAAGL,MAAM,EAAE;EAC7B,IAAIM,iBAAiB,GAAGN,MAAM,EAAE;EAChC,IAAIO,yBAAyB,GAAGP,MAAM,CAAC,CAAC,CAAC;EACzC,IAAIQ,iBAAiB,GAAGT,OAAO,CAAC,YAAY;IACxC,IAAIU,EAAE;IACN,IAAI,CAACP,QAAQ,IAAI,CAACA,QAAQ,CAACQ,MAAM,EAAE;MAC/BH,yBAAyB,CAACI,OAAO,GAAG,CAAC;MACrC,OAAO,CAAC;IACZ;IACA,IAAIC,qBAAqB,GAAG,CAACH,EAAE,GAAGP,QAAQ,KAAK,IAAI,IAAIA,QAAQ,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,QAAQ,CAACE,qBAAqB,CAAC,MAAM,IAAI,IAAIK,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACI,EAAE;IACjK;IACA,IAAID,qBAAqB,KAAKN,iBAAiB,CAACK,OAAO,EAAE;MACrD,OAAOJ,yBAAyB,CAACI,OAAO;IAC5C;IACA,IAAI,CAACN,cAAc,CAACM,OAAO,EAAE;MACzBN,cAAc,CAACM,OAAO,GAAGC,qBAAqB;IAClD;IACAN,iBAAiB,CAACK,OAAO,GAAGC,qBAAqB;IACjD;IACA;IACA,KAAK,IAAIE,CAAC,GAAGP,yBAAyB,CAACI,OAAO,EAAEG,CAAC,GAAGZ,QAAQ,CAACQ,MAAM,EAAEI,CAAC,IAAI,CAAC,EAAE;MACzE,IAAIZ,QAAQ,CAACY,CAAC,CAAC,CAACD,EAAE,KAAKR,cAAc,CAACM,OAAO,EAAE;QAC3CJ,yBAAyB,CAACI,OAAO,GAAGG,CAAC;QACrC,OAAOA,CAAC;MACZ;IACJ;IACA;IACAT,cAAc,CAACM,OAAO,GAAGC,qBAAqB;IAC9CL,yBAAyB,CAACI,OAAO,GAAG,CAAC;IACrC,OAAO,CAAC;IACR;IACA;EACJ,CAAC,EAAE,CAACT,QAAQ,EAAEA,QAAQ,KAAK,IAAI,IAAIA,QAAQ,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,QAAQ,CAACQ,MAAM,CAAC,CAAC;EACnF,OAAOF,iBAAiB;AAC5B"},"metadata":{},"sourceType":"module","externalDependencies":[]}