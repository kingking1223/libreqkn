{"ast":null,"code":"import React, { useRef } from 'react';\nimport { Avatar as DefaultAvatar } from '../Avatar';\nvar UnMemoizedChannelPreviewMessenger = function (props) {\n  var _a, _b;\n  var active = props.active,\n    _c = props.Avatar,\n    Avatar = _c === void 0 ? DefaultAvatar : _c,\n    channel = props.channel,\n    displayImage = props.displayImage,\n    displayTitle = props.displayTitle,\n    latestMessage = props.latestMessage,\n    setActiveChannel = props.setActiveChannel,\n    unread = props.unread,\n    watchers = props.watchers;\n  var channelPreviewButton = useRef(null);\n  var activeClass = active ? 'str-chat__channel-preview-messenger--active' : '';\n  var unreadClass = unread && unread >= 1 ? 'str-chat__channel-preview-messenger--unread' : '';\n  var avatarName = displayTitle || ((_b = (_a = channel.state.messages[channel.state.messages.length - 1]) === null || _a === void 0 ? void 0 : _a.user) === null || _b === void 0 ? void 0 : _b.id);\n  var onSelectChannel = function () {\n    if (setActiveChannel) {\n      setActiveChannel(channel, watchers);\n    }\n    if (channelPreviewButton === null || channelPreviewButton === void 0 ? void 0 : channelPreviewButton.current) {\n      channelPreviewButton.current.blur();\n    }\n  };\n  return React.createElement(\"button\", {\n    \"aria-label\": \"Select Channel: \" + (displayTitle || ''),\n    \"aria-selected\": active,\n    className: \"str-chat__channel-preview-messenger \" + unreadClass + \" \" + activeClass,\n    \"data-testid\": 'channel-preview-button',\n    onClick: onSelectChannel,\n    ref: channelPreviewButton,\n    role: 'option'\n  }, React.createElement(\"div\", {\n    className: 'str-chat__channel-preview-messenger--left'\n  }, React.createElement(Avatar, {\n    image: displayImage,\n    name: avatarName,\n    size: 40\n  })), React.createElement(\"div\", {\n    className: 'str-chat__channel-preview-messenger--right'\n  }, React.createElement(\"div\", {\n    className: 'str-chat__channel-preview-messenger--name'\n  }, React.createElement(\"span\", null, displayTitle)), React.createElement(\"div\", {\n    className: 'str-chat__channel-preview-messenger--last-message'\n  }, latestMessage)));\n};\n/**\n * Used as preview component for channel item in [ChannelList](#channellist) component.\n * Its best suited for messenger type chat.\n */\nexport var ChannelPreviewMessenger = React.memo(UnMemoizedChannelPreviewMessenger);","map":{"version":3,"names":["React","useRef","Avatar","DefaultAvatar","UnMemoizedChannelPreviewMessenger","props","_a","_b","active","_c","channel","displayImage","displayTitle","latestMessage","setActiveChannel","unread","watchers","channelPreviewButton","activeClass","unreadClass","avatarName","state","messages","length","user","id","onSelectChannel","current","blur","createElement","className","onClick","ref","role","image","name","size","ChannelPreviewMessenger","memo"],"sources":["/home/kingking/Documents/code/website/libreqkn/client/node_modules/stream-chat-react/dist/components/ChannelPreview/ChannelPreviewMessenger.js"],"sourcesContent":["import React, { useRef } from 'react';\nimport { Avatar as DefaultAvatar } from '../Avatar';\nvar UnMemoizedChannelPreviewMessenger = function (props) {\n    var _a, _b;\n    var active = props.active, _c = props.Avatar, Avatar = _c === void 0 ? DefaultAvatar : _c, channel = props.channel, displayImage = props.displayImage, displayTitle = props.displayTitle, latestMessage = props.latestMessage, setActiveChannel = props.setActiveChannel, unread = props.unread, watchers = props.watchers;\n    var channelPreviewButton = useRef(null);\n    var activeClass = active ? 'str-chat__channel-preview-messenger--active' : '';\n    var unreadClass = unread && unread >= 1 ? 'str-chat__channel-preview-messenger--unread' : '';\n    var avatarName = displayTitle || ((_b = (_a = channel.state.messages[channel.state.messages.length - 1]) === null || _a === void 0 ? void 0 : _a.user) === null || _b === void 0 ? void 0 : _b.id);\n    var onSelectChannel = function () {\n        if (setActiveChannel) {\n            setActiveChannel(channel, watchers);\n        }\n        if (channelPreviewButton === null || channelPreviewButton === void 0 ? void 0 : channelPreviewButton.current) {\n            channelPreviewButton.current.blur();\n        }\n    };\n    return (React.createElement(\"button\", { \"aria-label\": \"Select Channel: \" + (displayTitle || ''), \"aria-selected\": active, className: \"str-chat__channel-preview-messenger \" + unreadClass + \" \" + activeClass, \"data-testid\": 'channel-preview-button', onClick: onSelectChannel, ref: channelPreviewButton, role: 'option' },\n        React.createElement(\"div\", { className: 'str-chat__channel-preview-messenger--left' },\n            React.createElement(Avatar, { image: displayImage, name: avatarName, size: 40 })),\n        React.createElement(\"div\", { className: 'str-chat__channel-preview-messenger--right' },\n            React.createElement(\"div\", { className: 'str-chat__channel-preview-messenger--name' },\n                React.createElement(\"span\", null, displayTitle)),\n            React.createElement(\"div\", { className: 'str-chat__channel-preview-messenger--last-message' }, latestMessage))));\n};\n/**\n * Used as preview component for channel item in [ChannelList](#channellist) component.\n * Its best suited for messenger type chat.\n */\nexport var ChannelPreviewMessenger = React.memo(UnMemoizedChannelPreviewMessenger);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}