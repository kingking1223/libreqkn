{"ast":null,"code":"import { useEffect, useRef } from 'react';\nimport { useChatContext } from '../../../context/ChatContext';\nexport function useMessageListScrollManager(params) {\n  var onScrollBy = params.onScrollBy,\n    scrollContainerMeasures = params.scrollContainerMeasures,\n    scrolledUpThreshold = params.scrolledUpThreshold,\n    scrollToBottom = params.scrollToBottom,\n    showNewMessages = params.showNewMessages;\n  var client = useChatContext('useMessageListScrollManager').client;\n  var measures = useRef({\n    offsetHeight: 0,\n    scrollHeight: 0\n  });\n  var messages = useRef();\n  var scrollTop = useRef(0);\n  useEffect(function () {\n    var _a, _b, _c;\n    var prevMeasures = measures.current;\n    var prevMessages = messages.current;\n    var newMessages = params.messages;\n    var lastNewMessage = newMessages[newMessages.length - 1] || {};\n    var lastPrevMessage = prevMessages === null || prevMessages === void 0 ? void 0 : prevMessages[prevMessages.length - 1];\n    var newMeasures = scrollContainerMeasures();\n    var wasAtBottom = prevMeasures.scrollHeight - prevMeasures.offsetHeight - scrollTop.current < scrolledUpThreshold;\n    if (typeof prevMessages !== 'undefined') {\n      if (prevMessages.length < newMessages.length) {\n        // messages added to the top\n        if ((lastPrevMessage === null || lastPrevMessage === void 0 ? void 0 : lastPrevMessage.id) === lastNewMessage.id) {\n          var listHeightDelta = newMeasures.scrollHeight - prevMeasures.scrollHeight;\n          if (scrollTop.current === 0) {\n            onScrollBy(listHeightDelta);\n          }\n        }\n        // messages added to the bottom\n        else {\n          var lastMessageIsFromCurrentUser = ((_a = lastNewMessage.user) === null || _a === void 0 ? void 0 : _a.id) === client.userID;\n          if (lastMessageIsFromCurrentUser || wasAtBottom) {\n            scrollToBottom();\n          } else {\n            showNewMessages();\n          }\n        }\n      }\n      // message list length didn't change, but check if last message had reaction/reply update\n      else {\n        var hasNewReactions = ((_b = lastPrevMessage === null || lastPrevMessage === void 0 ? void 0 : lastPrevMessage.latest_reactions) === null || _b === void 0 ? void 0 : _b.length) !== ((_c = lastNewMessage.latest_reactions) === null || _c === void 0 ? void 0 : _c.length);\n        var hasNewReplies = (lastPrevMessage === null || lastPrevMessage === void 0 ? void 0 : lastPrevMessage.reply_count) !== lastNewMessage.reply_count;\n        if ((hasNewReactions || hasNewReplies) && wasAtBottom) {\n          scrollToBottom();\n        }\n      }\n    }\n    messages.current = newMessages;\n    measures.current = newMeasures;\n  }, [measures, messages, params.messages]);\n  return function (scrollTopValue) {\n    scrollTop.current = scrollTopValue;\n  };\n}","map":{"version":3,"names":["useEffect","useRef","useChatContext","useMessageListScrollManager","params","onScrollBy","scrollContainerMeasures","scrolledUpThreshold","scrollToBottom","showNewMessages","client","measures","offsetHeight","scrollHeight","messages","scrollTop","_a","_b","_c","prevMeasures","current","prevMessages","newMessages","lastNewMessage","length","lastPrevMessage","newMeasures","wasAtBottom","id","listHeightDelta","lastMessageIsFromCurrentUser","user","userID","hasNewReactions","latest_reactions","hasNewReplies","reply_count","scrollTopValue"],"sources":["/home/kingking/Documents/code/website/libreqkn/node_modules/stream-chat-react/dist/components/MessageList/hooks/useMessageListScrollManager.js"],"sourcesContent":["import { useEffect, useRef } from 'react';\nimport { useChatContext } from '../../../context/ChatContext';\nexport function useMessageListScrollManager(params) {\n    var onScrollBy = params.onScrollBy, scrollContainerMeasures = params.scrollContainerMeasures, scrolledUpThreshold = params.scrolledUpThreshold, scrollToBottom = params.scrollToBottom, showNewMessages = params.showNewMessages;\n    var client = useChatContext('useMessageListScrollManager').client;\n    var measures = useRef({\n        offsetHeight: 0,\n        scrollHeight: 0,\n    });\n    var messages = useRef();\n    var scrollTop = useRef(0);\n    useEffect(function () {\n        var _a, _b, _c;\n        var prevMeasures = measures.current;\n        var prevMessages = messages.current;\n        var newMessages = params.messages;\n        var lastNewMessage = newMessages[newMessages.length - 1] || {};\n        var lastPrevMessage = prevMessages === null || prevMessages === void 0 ? void 0 : prevMessages[prevMessages.length - 1];\n        var newMeasures = scrollContainerMeasures();\n        var wasAtBottom = prevMeasures.scrollHeight - prevMeasures.offsetHeight - scrollTop.current <\n            scrolledUpThreshold;\n        if (typeof prevMessages !== 'undefined') {\n            if (prevMessages.length < newMessages.length) {\n                // messages added to the top\n                if ((lastPrevMessage === null || lastPrevMessage === void 0 ? void 0 : lastPrevMessage.id) === lastNewMessage.id) {\n                    var listHeightDelta = newMeasures.scrollHeight - prevMeasures.scrollHeight;\n                    if (scrollTop.current === 0) {\n                        onScrollBy(listHeightDelta);\n                    }\n                }\n                // messages added to the bottom\n                else {\n                    var lastMessageIsFromCurrentUser = ((_a = lastNewMessage.user) === null || _a === void 0 ? void 0 : _a.id) === client.userID;\n                    if (lastMessageIsFromCurrentUser || wasAtBottom) {\n                        scrollToBottom();\n                    }\n                    else {\n                        showNewMessages();\n                    }\n                }\n            }\n            // message list length didn't change, but check if last message had reaction/reply update\n            else {\n                var hasNewReactions = ((_b = lastPrevMessage === null || lastPrevMessage === void 0 ? void 0 : lastPrevMessage.latest_reactions) === null || _b === void 0 ? void 0 : _b.length) !== ((_c = lastNewMessage.latest_reactions) === null || _c === void 0 ? void 0 : _c.length);\n                var hasNewReplies = (lastPrevMessage === null || lastPrevMessage === void 0 ? void 0 : lastPrevMessage.reply_count) !== lastNewMessage.reply_count;\n                if ((hasNewReactions || hasNewReplies) && wasAtBottom) {\n                    scrollToBottom();\n                }\n            }\n        }\n        messages.current = newMessages;\n        measures.current = newMeasures;\n    }, [measures, messages, params.messages]);\n    return function (scrollTopValue) {\n        scrollTop.current = scrollTopValue;\n    };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}