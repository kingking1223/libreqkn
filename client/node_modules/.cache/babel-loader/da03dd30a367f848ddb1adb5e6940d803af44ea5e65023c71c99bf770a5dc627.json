{"ast":null,"code":"'use strict';\n\nconst XmlNode = require('./XmlNode');\n\n/**\nElement in an XML document.\n\n@public\n*/\nclass XmlElement extends XmlNode {\n  /**\n  @param {string} name\n  @param {{[attrName: string]: string}} [attributes]\n  @param {Array<XmlCdata|XmlComment|XmlElement|XmlProcessingInstruction|XmlText>} [children]\n  */\n  constructor(name) {\n    let attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Object.create(null);\n    let children = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    super();\n\n    /**\n    Name of this element.\n     @type {string}\n    @public\n    */\n    this.name = name;\n\n    /**\n    Attributes on this element.\n     @type {{[attrName: string]: string}}\n    @public\n    */\n    this.attributes = attributes;\n\n    /**\n    Child nodes of this element.\n     @type {Array<XmlCdata|XmlComment|XmlElement|XmlProcessingInstruction|XmlText>}\n    @public\n    */\n    this.children = children;\n  }\n\n  /**\n  Whether this node is empty (meaning it has no children).\n   @type {boolean}\n  @public\n  */\n  get isEmpty() {\n    return this.children.length === 0;\n  }\n\n  /** @type {boolean} */\n  get preserveWhitespace() {\n    /** @type {XmlNode?} */\n    let node = this;\n    while (node instanceof XmlElement) {\n      if ('xml:space' in node.attributes) {\n        return node.attributes['xml:space'] === 'preserve';\n      }\n      node = node.parent;\n    }\n    return false;\n  }\n\n  /**\n  Text content of this element and all its descendants.\n   @type {string}\n  @public\n  */\n  get text() {\n    return this.children.map(child => 'text' in child ? child.text : '').join('');\n  }\n  get type() {\n    return XmlNode.TYPE_ELEMENT;\n  }\n\n  /** @returns {{[key: string]: any}} */\n  toJSON() {\n    return Object.assign(XmlNode.prototype.toJSON.call(this), {\n      name: this.name,\n      attributes: this.attributes,\n      children: this.children.map(child => child.toJSON())\n    });\n  }\n}\nmodule.exports = XmlElement;\n\n/** @typedef {import('./XmlCdata')} XmlCdata */\n/** @typedef {import('./XmlComment')} XmlComment */\n/** @typedef {import('./XmlProcessingInstruction')} XmlProcessingInstruction */\n/** @typedef {import('./XmlText')} XmlText */","map":{"version":3,"names":["XmlNode","require","XmlElement","constructor","name","attributes","Object","create","children","isEmpty","length","preserveWhitespace","node","parent","text","map","child","join","type","TYPE_ELEMENT","toJSON","assign","prototype","call","module","exports"],"sources":["/home/kingking/Documents/code/website/libreqkn/node_modules/@rgrove/parse-xml/src/lib/XmlElement.js"],"sourcesContent":["'use strict';\n\nconst XmlNode = require('./XmlNode');\n\n/**\nElement in an XML document.\n\n@public\n*/\nclass XmlElement extends XmlNode {\n  /**\n  @param {string} name\n  @param {{[attrName: string]: string}} [attributes]\n  @param {Array<XmlCdata|XmlComment|XmlElement|XmlProcessingInstruction|XmlText>} [children]\n  */\n  constructor(name, attributes = Object.create(null), children = []) {\n    super();\n\n    /**\n    Name of this element.\n\n    @type {string}\n    @public\n    */\n    this.name = name;\n\n    /**\n    Attributes on this element.\n\n    @type {{[attrName: string]: string}}\n    @public\n    */\n    this.attributes = attributes;\n\n    /**\n    Child nodes of this element.\n\n    @type {Array<XmlCdata|XmlComment|XmlElement|XmlProcessingInstruction|XmlText>}\n    @public\n    */\n    this.children = children;\n  }\n\n  /**\n  Whether this node is empty (meaning it has no children).\n\n  @type {boolean}\n  @public\n  */\n  get isEmpty() {\n    return this.children.length === 0;\n  }\n\n  /** @type {boolean} */\n  get preserveWhitespace() {\n    /** @type {XmlNode?} */\n    let node = this;\n\n    while (node instanceof XmlElement) {\n      if ('xml:space' in node.attributes) {\n        return node.attributes['xml:space'] === 'preserve';\n      }\n\n      node = node.parent;\n    }\n\n    return false;\n  }\n\n  /**\n  Text content of this element and all its descendants.\n\n  @type {string}\n  @public\n  */\n  get text() {\n    return this.children\n      .map(child => 'text' in child ? child.text : '')\n      .join('');\n  }\n\n  get type() {\n    return XmlNode.TYPE_ELEMENT;\n  }\n\n  /** @returns {{[key: string]: any}} */\n  toJSON() {\n    return Object.assign(XmlNode.prototype.toJSON.call(this), {\n      name: this.name,\n      attributes: this.attributes,\n      children: this.children.map(child => child.toJSON()),\n    });\n  }\n}\n\nmodule.exports = XmlElement;\n\n/** @typedef {import('./XmlCdata')} XmlCdata */\n/** @typedef {import('./XmlComment')} XmlComment */\n/** @typedef {import('./XmlProcessingInstruction')} XmlProcessingInstruction */\n/** @typedef {import('./XmlText')} XmlText */\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,OAAO,GAAGC,OAAO,CAAC,WAAW,CAAC;;AAEpC;AACA;AACA;AACA;AACA;AACA,MAAMC,UAAU,SAASF,OAAO,CAAC;EAC/B;AACF;AACA;AACA;AACA;EACEG,WAAW,CAACC,IAAI,EAAmD;IAAA,IAAjDC,UAAU,uEAAGC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;IAAA,IAAEC,QAAQ,uEAAG,EAAE;IAC/D,KAAK,EAAE;;IAEP;AACJ;AACA;AACA;AACA;IAEI,IAAI,CAACJ,IAAI,GAAGA,IAAI;;IAEhB;AACJ;AACA;AACA;AACA;IAEI,IAAI,CAACC,UAAU,GAAGA,UAAU;;IAE5B;AACJ;AACA;AACA;AACA;IAEI,IAAI,CAACG,QAAQ,GAAGA,QAAQ;EAC1B;;EAEA;AACF;AACA;AACA;AACA;EAEE,IAAIC,OAAO,GAAG;IACZ,OAAO,IAAI,CAACD,QAAQ,CAACE,MAAM,KAAK,CAAC;EACnC;;EAEA;EACA,IAAIC,kBAAkB,GAAG;IACvB;IACA,IAAIC,IAAI,GAAG,IAAI;IAEf,OAAOA,IAAI,YAAYV,UAAU,EAAE;MACjC,IAAI,WAAW,IAAIU,IAAI,CAACP,UAAU,EAAE;QAClC,OAAOO,IAAI,CAACP,UAAU,CAAC,WAAW,CAAC,KAAK,UAAU;MACpD;MAEAO,IAAI,GAAGA,IAAI,CAACC,MAAM;IACpB;IAEA,OAAO,KAAK;EACd;;EAEA;AACF;AACA;AACA;AACA;EAEE,IAAIC,IAAI,GAAG;IACT,OAAO,IAAI,CAACN,QAAQ,CACjBO,GAAG,CAACC,KAAK,IAAI,MAAM,IAAIA,KAAK,GAAGA,KAAK,CAACF,IAAI,GAAG,EAAE,CAAC,CAC/CG,IAAI,CAAC,EAAE,CAAC;EACb;EAEA,IAAIC,IAAI,GAAG;IACT,OAAOlB,OAAO,CAACmB,YAAY;EAC7B;;EAEA;EACAC,MAAM,GAAG;IACP,OAAOd,MAAM,CAACe,MAAM,CAACrB,OAAO,CAACsB,SAAS,CAACF,MAAM,CAACG,IAAI,CAAC,IAAI,CAAC,EAAE;MACxDnB,IAAI,EAAE,IAAI,CAACA,IAAI;MACfC,UAAU,EAAE,IAAI,CAACA,UAAU;MAC3BG,QAAQ,EAAE,IAAI,CAACA,QAAQ,CAACO,GAAG,CAACC,KAAK,IAAIA,KAAK,CAACI,MAAM,EAAE;IACrD,CAAC,CAAC;EACJ;AACF;AAEAI,MAAM,CAACC,OAAO,GAAGvB,UAAU;;AAE3B;AACA;AACA;AACA"},"metadata":{},"sourceType":"script","externalDependencies":[]}